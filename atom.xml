<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Compass&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://alicerabbit.github.io/"/>
  <updated>2020-02-21T11:43:40.119Z</updated>
  <id>https://alicerabbit.github.io/</id>
  
  <author>
    <name>Compass</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android中活动的生命周期</title>
    <link href="https://alicerabbit.github.io/2020/02/21/Android%E4%B8%AD%E6%B4%BB%E5%8A%A8%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://alicerabbit.github.io/2020/02/21/Android%E4%B8%AD%E6%B4%BB%E5%8A%A8%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2020-02-21T11:43:40.119Z</published>
    <updated>2020-02-21T11:43:40.119Z</updated>
    
    <content type="html"><![CDATA[<p>Activity的生命周期是安卓开发中很重要的一个点，也是在面试中经常会被问到的一点，属于需要好好了解的一部分知识</p><a id="more"></a><p>首先在这里安利一下Google官方的开发者文档，虽然是繁体中文但是大致上不影响阅读，可能需要科学上网——<a href="https://developer.android.google.cn/guide/components/activities/">https://developer.android.google.cn/guide/components/activities/</a> ，在这里Google详细讲述了安卓活动相关的种种细节，希望在通过各种书籍视频学习时也一定要阅读这部分内容！</p><h2 id="活动状态"><a href="#活动状态" class="headerlink" title="活动状态"></a>活动状态</h2><p>在《第一行代码》第2版中将活动分为四种状态：</p><ol><li>运行状态</li><li>暂停状态</li><li>停止状态</li><li>销毁状态</li></ol><p>而在官方文档中，将活动分为三种状态：</p><ol><li>已继续</li><li>已暂停</li><li>已停止</li></ol><p>其实本质上相同，只是官方文档认为活动销毁后便不再算入生命周期。</p><p>当活动处在屏幕最前端且具有使用者焦点时，认为活动处于运行状态；当活动失去焦点，但仍然可见，即上层覆盖一个并不占用全屏幕的活动时进入暂停状态；当活动完全不可见（被另外一个活动完全遮挡）但仍存在于内存中时处于停滞状态。对于暂停或停止的活动，可以调用finish()方法销毁，使其在内存中清除。</p><h2 id="活动的生命周期回调"><a href="#活动的生命周期回调" class="headerlink" title="活动的生命周期回调"></a>活动的生命周期回调</h2><p>Activity类定义了7个回调方法：</p><pre><code class="java">public class ExampleActivity extends Activity {    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        // 活动被创建时调用    }    @Override    protected void onStart() {        super.onStart();        // 活动由不可见变成可见时调用    }    @Override    protected void onResume() {        super.onResume();        // 当活动准备好与用户交互时调用（活动本身处于运行状态）    }    @Override    protected void onPause() {        super.onPause();        // 当另一个活动获得焦点时调用，在这个方法中将一些消耗CPU的资源释放，保存一些关键数据，但执行速度要快，不能影响到新的栈顶活动    }    @Override    protected void onStop() {        super.onStop();        // 当活动完全不可见时调用    }    @Override    protected void onDestroy() {        super.onDestroy();        // 程序销毁前执行    }}</code></pre><p>活动的生存期可以分为三部分：</p><blockquote><p>完整生存期：onCreate()和onDestory()方法之间</p><p>可见生存期：位于onStart()和onStop()方法之间，在这个生存期内活动对于用户总是可见的，但有可能无法与用户交互（焦点不聚焦在本活动）</p><p>前台生存期：onResume()方法和onPause()方法之间所经历的就是前台生存期，这个时期活动总是可以与用户交互</p></blockquote><p>下面是谷歌官方提供的活动生命周期的示意图：</p><p><img src="https://cdn.jsdelivr.net/gh/AliceRabbit/ImgHosting/imgs/activity_lifecycle.png" alt=""></p><h3 id="活动被回收了怎么办？"><a href="#活动被回收了怎么办？" class="headerlink" title="活动被回收了怎么办？"></a>活动被回收了怎么办？</h3><p>如果想要在活动被回收后恢复活动需要使用onSaveInstanceState()方法，这个方法携带一个Bundle类型的参数，Bundle提供了一系列用于保存数据的方法，每个保存方法需要传入两个值——键（用于取回值）和需要保存的内容。</p><p>保存的数据如何恢复？</p><p>大家可能以及注意到在onCreate()方法中有Bundle类型的参数，在一般情况下这个参数为NULL，但是如果活动被回收前有通过onSaveInstanceState()方法保存数据，我们可以通过相应的取值方法将数据取出。</p><blockquote><p><strong>Tips</strong></p><p>官方文档中提到，即使没有主动采取数据保存，Activity的某些状态也会由预设 <code>onSaveInstanceState()</code> 实例还原。具体来说，预设实例会针对页面配置中的每一个View调用对应的 <code>onSaveInstanceState()</code>方法，UI中可见的变更都会自动保存，并在Activity重新构建时还原（如果组件没有ID，则系统无法储存其状态）。</p><p>如果想要禁用自动储存，只需要将android:saveEnabled设为”false”。</p></blockquote><h3 id="一些活动会重新构建的特殊情况"><a href="#一些活动会重新构建的特殊情况" class="headerlink" title="一些活动会重新构建的特殊情况"></a>一些活动会重新构建的特殊情况</h3><p>当某些系统设置在程序运行阶段进行变更时（例如：屏幕方向、键盘可用性、语言）。针对这些情况应该考虑到数据存储和恢复。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>好想出去玩！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Activity的生命周期是安卓开发中很重要的一个点，也是在面试中经常会被问到的一点，属于需要好好了解的一部分知识&lt;/p&gt;
    
    </summary>
    
    
      <category term="安卓学习" scheme="https://alicerabbit.github.io/categories/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="https://alicerabbit.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>安卓之路2</title>
    <link href="https://alicerabbit.github.io/2020/02/15/%E5%AE%89%E5%8D%93%E4%B9%8B%E8%B7%AF%C2%B72/"/>
    <id>https://alicerabbit.github.io/2020/02/15/%E5%AE%89%E5%8D%93%E4%B9%8B%E8%B7%AF%C2%B72/</id>
    <published>2020-02-15T14:02:20.968Z</published>
    <updated>2020-02-16T14:19:51.221Z</updated>
    
    <content type="html"><![CDATA[<p>安卓学习的第二篇内容</p><a id="more"></a><h2 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h2><p>Intent是在活动之间跳转不可少的方法</p><h3 id="显式Intent"><a href="#显式Intent" class="headerlink" title="显式Intent"></a>显式Intent</h3><p>Intent是Android中组件之间进行交互的重要方式，不仅可以指明当前组件想要执行的动作，还可以在不同组件之间传递数据。</p><p>Intent可大致分为两种显式Intent和隐式Intent，先来学习显式Intent的使用。</p><p>Intent有多个构造函数的重载，其中一个是Intent(Context packageContext, Class&lt;?&gt; cls)，构造函数接受两个参数，Context参数要求提供一个启动活动的上下文，第二个参数Class则是指定想要启动的目标活动。</p><p>在使用Intent是，Activity类提供了一个startActivity()方法，这个方法是专门用于启动活动的，该方法接收Intent，将构建好的Intent传入方法即可启动目标活动。</p><h3 id="隐式Intent"><a href="#隐式Intent" class="headerlink" title="隐式Intent"></a>隐式Intent</h3><p>隐式Intent不指明我们想启动哪一个活动，而指定一些列action和category等信息，然后交由系统区分写这个Intent，找出合适的活动去启动。（合适的活动是什么？A：可以响应Intent的活动）</p><p>通过配置&lt;activity&gt;标签下的&lt;intent-filter&gt;，可以指定当前活动可以响应的action和category：</p><pre><code class="xml">        &lt;activity android:name=&quot;.SecondActivity&quot;&gt;            &lt;intent-filter&gt;                &lt;action android:name=&quot;com.compass.demo.ACTION_START&quot;/&gt;                &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt;            &lt;/intent-filter&gt;        &lt;/activity&gt;</code></pre><p>这种配置使SecondActivity活动可以响应action为<code>com.compass.demo.ACTION_START</code>且category为<code>android.intent.category.DEFAULT</code>的活动。</p><p>通过隐式Intent还可以实现调用其他程序的活动的目的，利用这种功能可以实现浏览网页等功能。</p><h3 id="向下一个活动传递数据"><a href="#向下一个活动传递数据" class="headerlink" title="向下一个活动传递数据"></a>向下一个活动传递数据</h3><p>Intent提供了一系列putExtra()方法的重载，可以把我们向传递的数据暂存在Intent中，启动了另一个活动之后，只需要把这些数据再从Intent中取出来就可以了！下面是一个传递字符串的例子：</p><pre><code class="java">//传递部分，位于发起活动button1.setOnClick(new View.OnclickListener(){    @Override    public void onClick(View v){        String data = &quot;Compass forever！&quot;;        Intent intent = new Intent(FirstActivity.this, SecondActivity.class);        intent.putExtra(&quot;extra_data&quot;, data);        startActivity(intent);    }});//接收部分，位于目的活动public class SecondActivity extends AppCompatActivity{    @Override    protected void onCreat(Bundle savedInstanceState){        super.onCreate(savedInstanceState);        setContentView(R.layout.second_layout);        Intent intent = getIntent();        String data = intent.getStringExtra(&quot;extra_data&quot;);        Log.d(&quot;SecondActivity&quot;,data);    }}</code></pre><p>getStringExtra()用于接收字符串</p><p>getIntExtra()用于接收整型数据</p><p>getBooleanExtra()接收布尔型数据</p><h3 id="返回数据给上一个活动"><a href="#返回数据给上一个活动" class="headerlink" title="返回数据给上一个活动"></a>返回数据给上一个活动</h3><p><code>startActivityForResult()</code>方法可以满足我们在下个活动销毁时返回结果给上一个活动的需求。这个方法接收两个参数，第一个参数是intent，第二个参数是请求码（用于在回调中判断数据的来源）。</p><p>使用这种方法启动活动，需要在被启动的活动内构建一个Intent，在这里这个Intent仅仅用于传递数据而已。我们通过putExtra()将要传递的数据存放在Intent中，然后调用setResult()方法，setResult方法接收两个参数，第一个参数用于向上一个活动返回处理结果，一般只使用RESULT_OK或RESULT_CANCELED这两个值，第二个参数则把带有数据的Intent传递回去。</p><p>在原活动中重写<code>onActivityResult()</code>方法来获取返回的数据，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/AliceRabbit/ImgHosting/imgs/20200216221126.png" alt=""></p><p>onActivityResult()方法带有三个参数，第一个参数requestCode是启动时传入的请求码，第二个参数resultCode是我们返回数据时传入的处理结果，第三个参数则是携带着返回数据的Intent。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这次主要学习了Intent相关的知识，考虑到明天（2020.2.17）就要开启网课的第一天了，所以这次的内容可能会稍微少一点点。</p><p>按照学习进度，接下来应该是要学习活动的生命周期相关的知识了，这是很重要的一部分，所以我可能会用很大的篇幅来记录学习过程。加油！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安卓学习的第二篇内容&lt;/p&gt;
    
    </summary>
    
    
      <category term="安卓学习" scheme="https://alicerabbit.github.io/categories/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="https://alicerabbit.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>安卓之路·1</title>
    <link href="https://alicerabbit.github.io/2020/02/12/%E5%AE%89%E5%8D%93%E4%B9%8B%E8%B7%AF1.html/"/>
    <id>https://alicerabbit.github.io/2020/02/12/%E5%AE%89%E5%8D%93%E4%B9%8B%E8%B7%AF1.html/</id>
    <published>2020-02-12T14:54:28.438Z</published>
    <updated>2020-02-18T02:46:26.627Z</updated>
    
    <content type="html"><![CDATA[<p>开始了~</p><a id="more"></a><h2 id="Android系统架构"><a href="#Android系统架构" class="headerlink" title="Android系统架构"></a>Android系统架构</h2><p>Android可分为四层架构，五块区域。</p><ul><li><p>LINUX内核层——提供硬件的底层驱动</p></li><li><p>系统运行层——提供系统的主要特性支持，Android运行时库也在这一层，提供了一些核心库，允许开发者使用Java语言编写Android应用</p></li><li><p>应用框架层——提供构建应用程序时可能用到的API</p></li><li><p>应用层</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/AliceRabbit/ImgHosting/imgs/20200212161600.png" alt="四层架构"></p><h2 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h2><p>一般情况下，活动继承自AppCompatActivity，onCreate()方法继承自父类，我们实现功能则多是通过对这个方法的重写来实现。</p><p>所有活动需要在AndroidManifest.xml中注册才能生效，活动声明放在&lt;application&gt;标签内，通过&lt;activity&gt;标签对活动进行注册。</p><blockquote><p>如何配置主活动？</p><p>在&lt;activity&gt;标签内加入&lt;intent-filter&gt;标签，并在这个标签内添加</p><p>&lt;action android:name=”android.intent.action.MAIN”/&gt;</p><p>&lt;category android:name=”android.intent.category.LAUNCHER”/&gt;</p></blockquote><p>销毁一个活动：Activity类提供了一个finish()方法，通过调用这个方法可以销毁当前活动</p><h3 id="活动状态"><a href="#活动状态" class="headerlink" title="活动状态"></a>活动状态</h3><p>活动在生命周期中最多可能有四种状态：</p><blockquote><p>运行状态</p><p>暂停状态</p><p>停止状态</p><p>销毁状态</p></blockquote><p>Activity类中定义了7个回调方法：</p><ul><li>onCreate()。会在活动第一次被创建时调用，完成活动的初始化。</li><li>onStart()。在活动由不可见变为可见时调用。</li><li>onResum()。在活动准备好和用户交互时调用。</li><li>onPause()。当系统准备去启动或回复另一个活动时调用。</li><li>onStop()。当活动完全不可见时调用。</li><li>onDestroy()。在活动被销毁之前调用，之后的活动状态为销毁状态。</li><li>onRestat()。这个方法在活动由停止状态变为运行状态之前调用。</li></ul><blockquote><p>如何保证在活动被回收后，恢复活动的状态？</p><p>Activity提供了onSaveInstanceState()回调方法临时保存数据。</p><p>onSaveInstanceState()方法可以携带一个Bundle类型的参数，Bundle提供了一系列方法用于保存数据，名保存方法需要传入两个参数，第一个参数是键（用于取回值），第二个是需要保存的参数。</p><p>保存代码实例如下：</p><pre><code class="java">@Overrideprotected void onSaveInstanceState(Bundle outState){    super.onSaveInstanceState(outState);    String tempData = &quot;Someting you just typed&quot;;    outState.putString(&quot;data_key&quot;,tempData);}</code></pre><p>恢复数据的代码应当写在onCreate()方法，如下所示</p><pre><code class="java">@Overrideprotected void onCreate(Bundle savedInstanceState){    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    if (saveInstanceState != null){        String tempData = savedInstanceState.getString(&quot;data_key&quot;);    }}</code></pre><p>这里传递数据的方式和Intent传递信息的方式是十分类似的。</p></blockquote><h3 id="活动的启动方式"><a href="#活动的启动方式" class="headerlink" title="活动的启动方式"></a>活动的启动方式</h3><p>有四种启动方式</p><ul><li>standard</li><li>singleTop</li><li>singleTask</li><li>singleInstance</li></ul><p>具体的区别这里不再阐述</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>发现拾起来要比第一次学顺畅不少，当时许多无法理解的点也都很容易的理解了，不过效率还要提升！马上开始上网课了，考虑用水课的时间拿来学Android（？好孩子不要学）、</p><p>希望这是一个好的开始，能够坚持下去！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始了~&lt;/p&gt;
    
    </summary>
    
    
      <category term="安卓学习" scheme="https://alicerabbit.github.io/categories/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="https://alicerabbit.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>重走安卓路</title>
    <link href="https://alicerabbit.github.io/2020/02/12/%E9%87%8D%E8%B5%B0%E5%AE%89%E5%8D%93%E8%B7%AF.html/"/>
    <id>https://alicerabbit.github.io/2020/02/12/%E9%87%8D%E8%B5%B0%E5%AE%89%E5%8D%93%E8%B7%AF.html/</id>
    <published>2020-02-12T07:55:22.079Z</published>
    <updated>2020-02-12T07:55:22.079Z</updated>
    
    <content type="html"><![CDATA[<p>曾经半途而废放下的安卓开发，最终还是重新捡了起来。</p><a id="more"></a><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>最近没事就在逛酷安，酷安上活跃着很多独立开发者，和大厂的流氓行为不同，独立开发者往往在开发中遵循谷歌的开发标准，令安卓应用展现出应有的魅力，通过许多独立开发者开发的第三方应用，我逐渐淘汰掉许多大厂的第一方应用（这里要特别提一下share微博，提供了一个近乎完美的移动端微博使用体验！），也有许多效率应用慢慢改善着我的生活习惯。从一个应用中，能够看到作者本人的影子，可以说独立应用甚至可以说是作者美学的完美体现。</p><h2 id="我怎么开始"><a href="#我怎么开始" class="headerlink" title="我怎么开始"></a>我怎么开始</h2><p>再次下载回郭霖大神写的《第一行代码》，现在快递停了，等风平浪静一定补票！</p><p>Android Studio则是一直躺在我的电脑里不用再布置环境了。</p><h2 id="关于开发语言"><a href="#关于开发语言" class="headerlink" title="关于开发语言"></a>关于开发语言</h2><p>我也纠结过是不是直接去接触Flutter，但是考虑到Flutter目前终归还称不上一门成熟的语言，我决定还是从Java学起，慢慢接触Kotlin这门谷歌推崇的开发语言，毕竟这条路被许多前辈已经趟过，也算是一种比较稳妥的方案吧。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>我现在已结点开了PDF，结束完这篇文章，我就会从下一篇文章开始记录我的安卓学习之路！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;曾经半途而废放下的安卓开发，最终还是重新捡了起来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="安卓学习" scheme="https://alicerabbit.github.io/categories/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="杂谈" scheme="https://alicerabbit.github.io/categories/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="Android" scheme="https://alicerabbit.github.io/tags/Android/"/>
    
      <category term="胡言乱语" scheme="https://alicerabbit.github.io/tags/%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>此处的第一篇博客</title>
    <link href="https://alicerabbit.github.io/2020/02/10/hello-world/"/>
    <id>https://alicerabbit.github.io/2020/02/10/hello-world/</id>
    <published>2020-02-10T11:58:48.770Z</published>
    <updated>2020-02-11T10:16:09.164Z</updated>
    
    <content type="html"><![CDATA[<p>写在这里的第一篇博客</p><a id="more"></a><h2 id="这个博客的起因"><a href="#这个博客的起因" class="headerlink" title="这个博客的起因"></a>这个博客的起因</h2><p>机缘巧合，这是一个特殊的新年，冠状病毒席卷华夏大地（都要从一个蝙蝠说起），我也被困在家里，思来想去不能干长肉啊！我要干点事情！又发现自己原来的博客各种意义上已经没法看了，所以决定从零开始建立一个新的博客——也就是这个。</p><p>说到底都怪那个没事吃蝙蝠的人。</p><p>先在这里立几个FLAG：</p><pre><code>+ 好好学习安卓开发，写出来一个拿的出手的APP+ 准备考研，但是还没想好考哪里+ 今年不当鸽子，把自己当年的旧账都收拾干净</code></pre><p>新年新气象，新博客也要确定一个全新的风貌！</p><p>BY Compass</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写在这里的第一篇博客&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
